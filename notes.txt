cout: console output
  --  an object
  --  followed by a 'leftward stream operator'
      ( << ) that shows the flow of data from 
      a value.
    -- cout << "Hello World!";

#include: a preprocessor directive, aka instruction
  to the compiler. Tells the compiler to load a part
  of the library.

using: sets up the namespace by which to refer to objects
  --  i.e. instead of needing std::cout << "Hello World!";
      we can do using namespace std; and cout << "hello";

line breaks: std::endl (or just endl if using namespace std)
  can also use '\n' character

std::cin -- console input
  --  can use a right-stream-operator ( >> ) to save
      console input to a variable

==  MUST ALWAYS DECLARE A VARIABLE BEFORE USING IT  ==
  -- Variables must be declared with data type
      --  Integer
      --  Floating Point
      --  Double precision floating point
      --  Text String
======================================================
Loops: 
  --  while (condition) {action}
  --  Do {action} while (condition)
    --  like a standard while() but is guaranteed to 
        execute at least once
======================================================
j = i++ : assign i to j, then increment i
j = ++i : increment i, then assign i to j
======================================================
To get a random number:
  --  #include <cstlib>     
      // for srand() and rand() functions
  --  #include <ctime>
      // for ctime() function
  --  srand(time(nullptr))
      // srand seed the rand function
      // nullptr is supported as of c++ 11.
        // With older compilers may need to use NULL
  --  rand() will now give random number
    --  will return a random unsigned integer anywhere
        in the range from 0 to RAND_MAX
    --  to get random number between 0 and n-1:
          rand() % n
======================================================
Functions:
all about that DDC
  1) Declare
  2) Define
  3) Call

  --  Best practices to declare functions at top of program
      by 'prototyping'

      !!!!  return_type function_name (argument_list);
      !!!!
      !!!!  ---------------------
      !!!!  --  *return type can be void
            --  *arguments must be preceded by types

  --  Can also declare & define at same time, but then must
      define them in the reverse order that they are called
        --  { statements; } after declaration

  --  By default, arguments are passed by value
    --  Pointers are how you pass data by location (or reference)
=========================================================
ARRAYS======ARRAYS======ARRAYS======ARRAYS======ARRAYS===
=ARRAYS======ARRAYS======ARRAYS======ARRAYS======ARRAYS==
=========================================================

  --  data_type array_name[length];

    --  to initialize:
  --  data_type array_name[length] = { value1, value2, etc };

======
==
==  Matrices
    **
    **  data_type matrix_name[rows][columns]

=========================================================
==STRINGS====STRINGS====STRINGS====STRINGS====STRINGS====
===STRINGS====STRINGS====STRINGS====STRINGS====STRINGS===
=========================================================

--  string literal:
    **
    **  cout << "this is a string literal";
--  string variable:
    **
    **  string string_name = "string message";

POINTERS                           POINTERS
     POINTERS                   POINTERS
          POINTERS           POINTERS
               POINTERS   POINTERS            ----->
                    POINTERS            POINTERS
               POINTERS   POINTERS            ----->
          POINTERS           POINTERS
     POINTERS                   POINTERS
POINTERS                           POINTERS

a POINTER is a variable that contains a numeric memory address
  --  allow for passing by reference
  --  allow for relational data structures
  
  --  DECLARATION:
      **  
      **  type *pointer_name;

  --  ASSIGNMENT:
      **
      **  pointer_name = &target_name
          
          ==  the & operator returns the memory
              address of its operand

  == *p = 5  // assigns the value 5 to the int pointed to by p

=========================================================
=======REFERENCE ARGUMENTS======REFERENCE ARGUMENTS======
=========REFERENCE ARGUMENTS=======REFERENCE ARGUMENTS===
=========================================================