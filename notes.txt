cout: console output
  --  an object
  --  followed by a 'leftward stream operator'
      ( << ) that shows the flow of data from 
      a value.
    -- cout << "Hello World!";

#include: a preprocessor directive, aka instruction
  to the compiler. Tells the compiler to load a part
  of the library.

using: sets up the namespace by which to refer to objects
  --  i.e. instead of needing std::cout << "Hello World!";
      we can do using namespace std; and cout << "hello";

line breaks: std::endl (or just endl if using namespace std)
  can also use '\n' character

std::cin -- console input
  --  can use a right-stream-operator ( >> ) to save
      console input to a variable

==  MUST ALWAYS DECLARE A VARIABLE BEFORE USING IT  ==
  -- Variables must be declared with data type
      --  Integer
      --  Floating Point
      --  Double precision floating point
      --  Text String
======================================================
Loops: 
  --  while (condition) {action}
  --  Do {action} while (condition)
    --  like a standard while() but is guaranteed to 
        execute at least once
======================================================
j = i++ : assign i to j, then increment i
j = ++i : increment i, then assign i to j
======================================================
To get a random number:
  --  #include <cstlib>     
      // for srand() and rand() functions
  --  #include <ctime>
      // for ctime() function
  --  srand(time(nullptr))
      // srand seed the rand function
      // nullptr is supported as of c++ 11.
        // With older compilers may need to use NULL
  --  rand() will now give random number
    --  will return a random unsigned integer anywhere
        in the range from 0 to RAND_MAX
    --  to get random number between 0 and n-1:
          rand() % n
======================================================
Functions:
all about that DDC
  1) Declare
  2) Define
  3) Call

  --  Best practices to declare functions at top of program
      by 'prototyping'

      !!!!  return_type function_name (argument_list);
      !!!!
      !!!!  ---------------------
      !!!!  --  *return type can be void
            --  *arguments must be preceded by types

  --  Can also declare & define at same time, but then must
      define them in the reverse order that they are called
        --  { statements; } after declaration

  --  By default, arguments are passed by value
    --  Pointers are how you pass data by location (or reference)
=========================================================
ARRAYS======ARRAYS======ARRAYS======ARRAYS======ARRAYS===
=ARRAYS======ARRAYS======ARRAYS======ARRAYS======ARRAYS==
=========================================================

  --  data_type array_name[length];

    --  to initialize:
  --  data_type array_name[length] = { value1, value2, etc };

======
==
==  Matrices
    **
    **  data_type matrix_name[rows][columns]

=========================================================
==STRINGS====STRINGS====STRINGS====STRINGS====STRINGS====
===STRINGS====STRINGS====STRINGS====STRINGS====STRINGS===
=========================================================

--  string literal:
    **
    **  cout << "this is a string literal";
--  string variable:
    **
    **  string string_name = "string message";

--  'c-style':
  --  char s[] = "Hello";   //  
      --  names the array s
      --  s is therefore constant and cannot change
  --  char *p = "Hello";
      --  assigns p to the memory address of the first
          character in the string
      --  p may therefore be changed
--  string functions:
    --  strcpy(str1, str2)
        //  copies str2 to str1
    --  strcat(str1, str2)
        //  joins str2 onto end of str1
    --  strlen(str)
        //  returns the length of str
    --  strncpy(str1, str2, n)
        //  copies the first n chars of str2 to str1
    --  strncat(str1, str2, n)
        //  joins the first n chars of str2 to end of str1
    --  strtok(src_str, delims)
        //  return the first substr deliminated by delims
          //  subsequent calls take NULL as first arg
          //  and return next substring
    --  strcmp(str1, str2)
        // returns true if the strings are identical
    !!  for all above, str1 must be declared with enough room
        to contain all the characters in the resulting string
    
--  SINGLE QUOTE <> SINGLE CHAR   //  treated as numerical value
--  DOUBLE QUOTE <> STRING        //  treated as menory address

--string class makes all this way easier

=======================================================
POINTERS                           POINTERS
     POINTERS                   POINTERS
          POINTERS           POINTERS
               POINTERS   POINTERS            ----->
                    POINTERS            POINTERS
               POINTERS   POINTERS            ----->
          POINTERS           POINTERS
     POINTERS                   POINTERS
POINTERS                           POINTERS

a POINTER is a variable that contains a numeric memory address
  --  allow for passing by reference
  --  allow for relational data structures
  
  --  DECLARATION:
      **  
      **  type *pointer_name;

  --  ASSIGNMENT:
      **
      **  pointer_name = &target_name
          
          ==  the & operator returns the memory
              address of its operand

  == *p = 5  // assigns the value 5 to the int pointed to by p

POINTER ARITHMETIC:
  only certain arithmetic operations are allowed with Pointers
    --  address_expression + integer
    --  integer + address_expression
    --  address_expression - integer
    --  integer - address_expression
  
  when integer and address expressions are added together, the integer is'
  scaled by the size of the data type

  an array's value is equal to the address value of its first element

      THEREFORE:
      -- &arr[2] is equivalent to arr + 2

=========================================================
=======REFERENCE ARGUMENTS======REFERENCE ARGUMENTS======
=========REFERENCE ARGUMENTS=======REFERENCE ARGUMENTS===
=========================================================

  --  use the address operator (&) to an argument declaration
      to make the argument pass by reference rather than copy

        --  data_type func_name(data_type &var_ref1, data_type &var_ref2)
    
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

File System: #include <fstream>

    --  ofstream stream_name("file_name.extension");
        //  creates an object of type ofstream (output filestream)
            that outputs to file_name.extension

    --  ifstream stream_name("file_name.extension");
        //  creates an object of type ifstream (input filestream)
            that reads from file_name.extension

    --  can specify if the output is text or binary
        --  with text files, use << and >> operators or .getline()
        --  with binaries, use .read() and .write()